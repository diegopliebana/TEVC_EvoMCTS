    public static int MCTS_ITERATIONS = 100;
    public static int INDIVIDUAL_ITERATIONS = 1;
    public static double K = Math.sqrt(2);
    public static double REWARD_DISCOUNT = 0.80;
    public static int FEATURES = LEFTRIGHT_FEATURES;	//2 features
	

        int gameIdx = 21;
        int levelIdx = 0; //level names from 0 to 4 (game_lvlN.txt).
		
        int M = 10000;   //number of repeats (only for statistical accuracy)
        int RLmin = 1;     //rollout lenghts to be tested from RLmin to RLmax, where RLmin >= 1
        int RLmax = 8;

        //int M = 1000;   //number of repeats (only for statistical accuracy)
        //int RLmin = 9;     //rollout lenghts to be tested from RLmin to RLmax, where RLmin >= 1
        //int RLmax = 30;
		
		
public class Bandit extends FitVectorSource{

    public double K = Math.sqrt(2);
    public double epsilon = 1e-6;
    public int popSize = 5;
	
public class ES extends FitVectorSource
{

    public int popSize = 10;

    double initNoiseDev = 0.1;
    static double noiseFac = 1.02;
	
public class VariableRandomMutHillClimber extends FitVectorSource
{
    double noiseDev = 0.1;
    static double noiseFac = 1.02;
	
public HashMap<String, Double> getFeatureVector()
{
	HashMap<String, Double> features = new HashMap<String, Double>();
	features.put("win:"+WIN, distanceToWin);
	features.put("lose:"+LOSE, distanceToLose);
	return features;
}
	
#------------ ONLY AFTER 5.11.2014

    public HashMap<String, Double> getFeatureVector()
    {
        HashMap<String, Double> features = new HashMap<String, Double>();
        features.put("win:"+WIN, distanceToWin);
        //features.put("lose:"+LOSE, distanceToLose);
        return features;
    }